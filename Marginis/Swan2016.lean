-- import Mathlib.Init.Set
-- import Mathlib.Data.Finite.Defs
-- import Mathlib.Data.Fintype.Card
-- import Mathlib.Data.Set.Finite
import Mathlib
/-!
# An Algebraic Weak Factorisation System on 01-Substitution Sets: A Constructive Proof

[ANDREW SWAN](http://logicandanalysis.org/index.php/jla/article/view/274)

On page 2 of the paper,
Perm(ùî∏) is the set of all finite permutations of ùî∏, i.e.,
the set of permutations œÄ such that œÄ a = a for all but finitely many a.
We show that Perm(ùî∏) is closed under composition and contains the identity.
-/

def moved {A : Type} (f : A ‚Üí A) : Set A := {a | f a ‚â† a}

def perm (A : Type) : Set (A ‚Üí A) := Œª f ‚Ü¶ Function.Bijective f ‚àß Finite (moved f)

theorem perm_comp {A : Type} (f g : perm A) : (f.1 ‚àò g.1) ‚àà perm A := by
    unfold perm
    constructor
    let hf := f.2.1
    let hg := g.2.1
    exact Function.Bijective.comp hf hg
    let hf := f.2.2
    let hg := g.2.2
    have hf' : Finite ({a | f.1 (g.1 a) ‚â† g.1 a}) := by
      unfold moved at *
      let G : {a | f.1 (g.1 a) ‚â† g.1 a} ‚Üí {a | f.1 a ‚â† a} := Œª a ‚Ü¶ ‚ü®g.1 a, a.2‚ü©
      let Q := Finite.of_injective G
      apply Q
      let R := g.2.1.1
      intro x y h
      have : g.1 x = g.1 y := by
        have h‚ÇÄ: g.1 x = (G x).1 := rfl
        have h‚ÇÅ: g.1 y = (G y).1 := rfl
        rw [h‚ÇÄ,h‚ÇÅ,h]
      let T := R this
      apply SetCoe.ext
      exact T
    unfold moved at *
    have h‚ÇÄ: { a | (f.1 ‚àò g.1) a ‚â† a} ‚äÜ {a | g.1 a ‚â† a} ‚à™ {a | f.1 (g.1 a) ‚â† g.1 a} := by
      intro a h
      contrapose h
      simp only [ne_eq, Set.mem_union, Set.mem_setOf_eq, not_or, not_not, Function.comp_apply] at *
      rw [h.2]
      tauto
    exact Finite.Set.subset _ h‚ÇÄ

theorem id_perm {A : Type} : id ‚àà perm A := by
    unfold perm moved
    constructor
    exact Function.bijective_id
    simp only [id_eq, ne_eq, not_true_eq_false, Set.setOf_false]
    apply Finite.of_fintype
#min_imports
